name: 'Terraform'
on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #  run: terraform fmt -check

    # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #  run: terraform plan
    - name: Terraform validate
      run: terraform validate
    # Tag and push
    #- name: Bump version and push tag
    #  id: tag_version
    #  uses: mathieudutour/github-tag-action@v5.5
    #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #  with:
    #    github_token: ${{ secrets.GITHUB_TOKEN }}
    #- name: Create a GitHub release
    #  uses: actions/create-release@v1
    #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: ${{ steps.tag_version.outputs.new_tag }}
    #    release_name: Release ${{ steps.tag_version.outputs.new_tag }}
    #    body: ${{ steps.tag_version.outputs.changelog }}

